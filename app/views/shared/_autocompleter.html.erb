<%
    # Parameters: 
    # main_name: name of the model (eg: BibliographyItem)
    # param_name: name of the field (eg: author)
    # autocomplete_url: url where to ask for the autocomplete list
    # existing: hash of already existing items of this kind, to add right away

    #on submit: params[:firb_card][:image_zone]
    #
    #or hash : params[:firb_card][:components][:name]
    #          params[:firb_card][:components][:type]
    #          and so on

    populate_ul_id = param_name+"_list"
    populate_autocomplete_div_id = param_name+"_autocomplete_div"
    input_text_id = param_name+"_autocomplete_me"
    add_button_id = param_name+"_add"
    indicator_id = param_name+"_indicator"

    # DEBUG, move this along with the populate_with_item function
    remove_path = image_path('icons/cross.png')

    # DEBUG/TODO: calculate the URL for the ajax-loader.gif image

%>

<ul id="<%= populate_ul_id %>">
</ul>

<input type='text' name='<%= input_text_id %>' id='<%= input_text_id %>' />
<input type='button' name='<%= add_button_id %>' id='<%= add_button_id %>' />
<span style="display: none;" id='<%= indicator_id %>'>
      <img alt="Working..." src="/images/icons/ajax-loader.gif">
</span>
<div id='<%= populate_autocomplete_div_id %>'></div>

<script>
    
    var param_name = "<%= param_name %>",
        add_button_id = "<%= add_button_id %>",
        indicator_id = "<%= indicator_id %>",
        populate_ul_id = "<%= populate_ul_id %>",
        main_name = "<%= main_name %>",
        current = [];
        
    // DEBUG: not sure if this get initialized on every partial we call... 
    // but in the end, is it bad?
    current[param_name] = [];
    
    // Load all existing data as soon as the window is ready
    Event.observe(window, 'load', function() {
        <% existing.each do |name, value|
           field_name = "#{main_name}[#{param_name}][#{value.hash}]"
        %>
            populate_with_item(populate_ul_id, '<%= name %>', [{name: '<%= field_name %>', value: '<%= value %>'}]);
        <% end %>
    });
    
    new Ajax.Autocompleter("<%= input_text_id %>", "<%= populate_autocomplete_div_id %>", "<%= autocomplete_url %>", {
      paramName: "value",
      indicator: indicator_id,
      afterUpdateElement : function(text, li_item) {
          // The user clicked on an item on the autocomplete list:
          // fill the text input with the value to show, and take note
          // of the real values to populate our list
          current[param_name]['content'] = li_item.innerHTML;
          current[param_name]['value'] = text.value;
      }
    });

    // Click on add button: populate our list with the previously
    // saved 
    $(add_button_id).observe('click', function() {
        var rand = Math.floor(Math.random()*99999),
            n = main_name+"["+param_name+"]["+rand+"]",
            v = current[param_name]['value'];
        console.log("# Add button click: "+n+" >> "+v);
            
        populate_with_item(populate_ul_id, current[param_name]['content'], [{name: n, value: v}]);
    });
    
    // Click on remove button: remove the entire group!
    function remove_group(id) {
        console.log("# Remove button click "+id);
        $(''+id).remove();
        return true;
    } // remove_group()

    function populate_with_item(populate_ul, display_string, values_array) {
        var rand_id = "id_" + Math.floor(Math.random()*99999),
            markup = "";

        console.log("# Called pop with "+populate_ul+", "+display_string+" "+values_array+" id: "+rand_id);
            
        markup += "<li id='"+rand_id+"'>";
        markup += "<span class='display_string'>"+display_string+"</span>";

        // Add all of the needed hidden fields
        for (var i = values_array.length - 1; i >= 0; i--){
            var name = values_array[i].name,
                value = values_array[i].value;
            markup += "<input type='hidden' value='"+value+"' name='"+name+"'>"
        };
        
        rem = 'remove_group("'+rand_id+'")';
        markup += "<input type='image' value='remove' onClick='"+rem+"' src='<%= remove_path %>' />"
        markup += "</li>";
        
        $(populate_ul).insert({bottom: markup});

    } // populate_with_item()

</script>