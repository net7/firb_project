<!-- Tag definitions for the Admin subsite -->
 
<include src="rapid" plugin="hobo"/>

<include src="taglibs/auto/admin/rapid/cards"/>
<include src="taglibs/auto/admin/rapid/pages"/>
<include src="taglibs/auto/admin/rapid/forms"/>
<include src="taglibs/cards"/>
<include src="taglibs/forms"/>
<include src="taglibs/base_cards" />
<include src="taglibs/talia_backend" />


<set-theme name="clean"/>

<def tag="publish">
    <div id="publish-#{typed_id}" part="xyz" class="button-float publish-div">
        <if test="&this.is_public?">
            <p class='published'>
                <span><ht key="hobo.published"/></span><br />
                <%= "#{l Time.parse(this.published_on), :format => :long}: #{this.published_by}" unless (this.published_on.nil?) %>
            </p>
                <form update="self" spinner-next-to="publish-#{typed_id}" action="/admin/publish/#{this.id}"><submit label="&I18n.t('hobo.unpublish')"/></form>
        </if>
        <else>
            <p class='not_published'>
                <span><ht key="hobo.not_published"/></span><br />
                <%= "#{l Time.parse(this.published_on), :format => :long}: #{this.published_by}" unless (this.published_on.nil?) %>
            </p>
                <form update="self" spinner-next-to="publish-#{typed_id}" action="/admin/publish/#{this.id}"><submit label="&I18n.t('hobo.publish')"/></form>
        </else>
    </div>
</def>


<def tag="app-name"><%= TaliaCore::CONFIG['site_name'] || "Talia Admin Panel" %></def>

<def tag="single-connection" attrs="typename, attribute, type, options">
    <% typename ||= (this.class.name.underscore || type.underscore) %>
    <% options ||= type.constantize.all.collect { |el| [ "#{el.name}", el.uri.to_s ] }.sort %>
    <% attribute_el = this.nil? ? "" : this.send(attribute.to_sym) %>
    <if test              = "&attribute_el.blank?">
        <select-menu name = "#{typename}[#{attribute}]"
            options       = "&options"
            first-option  = "&I18n.t('talia.select_one')" />
    </if>
    <else>
        <select-menu name = "#{typename}[#{attribute}]"
            options       = "&options"
            selected      = "&attribute_el.uri.to_s" />
    </else>
</def>

<def tag="image-zone-select">
    <talia-input field="image_zone" selectoptions="&image_zone_select_uri" merge />
</def>

<def tag="collection-sidebar">
	<h2><ht key="talia_collections.model_name_plural" /></h2>
	<collection>
		<item:>
			<div id="#{this.to_uri.safe_encoded}">
				<card/>
			</div>
		</item:>
		<after-item:>
			<if test="&this.updatable_by?(current_user)">
				<%= drop_receiving_element(this.to_uri.safe_encoded,
				:url => { :controller => 'admin/talia_sources', :action => 'assign_collection' },
				:with => "'source=' + encodeURIComponent(element.id) + '&collection=#{this.to_uri.safe_encoded}'",
				:hoverclass => 'drop_ready'
				) %>
			</if>
		</after-item:>
		<empty-message:><ht key="talia_collections.empty_message" /></empty-message>
	</collection>
</def>

<!-- Shows an image zone, if there's children, shows them as well -->
<def tag="imagezone" attrs="parentimageid">
    <span onmouseover="getFlashObject('<%= parentimageid %>').setPolygonHighlighted(true, '<%= this.id.to_s %>');"
        onmouseout="getFlashObject('<%= parentimageid %>').setPolygonHighlighted(false, '<%= this.id.to_s %>');" id="image_zone_#{this.id}" class="single-zone">
        <editor:name />
    </span>: <link-add-to-zone /> <link-del-zone />
    <% if this.zone_count > 0 %>
        <ul>
            <li repeat="&this.zones"> <imagezone parentimageid="#{parentimageid}"/> </li>
        </ul>
    <% end %>
</def>


<!-- 
    IMT Viewer tag, with parameters:
    - id: used for the id tag and for the embed.name attribute
    - b64: base64 of the xml needed to initialize it
 -->
<def tag="imt-viewer" attrs="id, b64, size">
    <% size ||= '120' %>
    <div class="imt-viewer">
        <object class="IMTViewer" b64="#{b64}" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="#{id}" width="#{size}" height="#{size}" codebase="http://fpdownload.macromedia.com/get/flashplayer/current/swflash.cab">
            <param name="movie" value="#{image_path('ImageMapperViewer.swf?js_prefix=jsapi_')}" />
            <param name="quality" value="high" />
            <param name="bgcolor" value="#ffffff" />
            <param name="allowScriptAccess" value="always" />
            <embed src="#{image_path('ImageMapperViewer.swf?js_prefix=jsapi_')}&oid=#{id}" quality="high" bgcolor="#ffffff" width="#{size}" height="#{size}" name="#{id}" align="middle" play="true" loop="false" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.adobe.com/go/getflashplayer" b64="#{b64}"></embed>
        </object>
    </div>
</def>

<def tag="img-not-ready">
    <div class="img-not-ready">
        <img src="&image_path('/images/icons/hourglass.png')" /> <ht key='image.image_not_ready' />
    </div>
</def>

<def tag="imt-thumb" attrs="img, zonelist">
    <div class="imt-thumb"><imt-viewer id="image_#{img.id}" b64="#{thumb_xml(img, zonelist)}"/></div>
</def>


<def tag="link-imt-edit">
    <%= link_to "<img src='#{image_path('/images/icons/vector_add.png')}' /> #{I18n.t('image.draw_in_editor')}", 
        {:action => "imtedit", :controller => "images", :controller => "images",  :id => this.id } %>
</def>
<def tag="link-add-to-image">
    <%= link_to "<img src='#{image_path('/images/icons/layout_add.png')}' />", {:action => "add_zone", :controller => :images, :id => this.id}, :class => "link-add button-float", :title => I18n.t("image.zone_add") %>
</def>
<def tag="link-add-to-zone">
    <%= link_to "<img src='#{image_path('/images/icons/layout_add.png')}' />", {:action => "add_zone",  :controller => :image_zones, :id => this.id}, :class => "link-add", :title => I18n.t("image.zone_add") %>
</def>
<def tag="link-del-zone">
    <%= link_to "<img src='#{image_path('/images/icons/cross.png')}' />", {:action => "remove_zone", :controller => :image_zones, :id => this.id}, :class=> "link-del", :title => I18n.t("image.zone_del"), :confirm => I18n.t("image.confirm_zone_del")  %>
</def>

<def tag="delete-icon">
    <delete-button image='icons/cross.png' class="button-float" />
</def>

<def tag="prop-language">
	<b>Language:</b> <this.lang if="lang" />
	<else>n/a (default)</else>
</def>

<def tag="semlabel"><this.label if="respond_to?(:label)" /><else><do if="respond_to?(:uri)"><%= this.to_uri.to_name_s %></do><else><%= this.to_s %></else></else></def>

<def tag="prop-type">
	<b>Type:</b> <this.type if="type" />
	<else>n/a (String)</else>
</def>

<def tag="property-string-card">
	<card>
		<header:><h4>"<this/>"</h4></header:>
		<body:>
			<p><prop-type /> <prop-language /></p>
		</body:>
	</card>
</def>

<def tag="property-relation-card">
	<card>
		<header:>
			<h4>
				<wrap tag="a" href="&url_for(:controller => 'admin/talia_sources', :action => this.id)" when="is_a?(TaliaCore::ActiveSource)">
					&lt;<semlabel />&gt;
				</wrap>
			</h4>
		</header:>
		<body:><p><%= this.uri.to_s %></p></body:>
	</card>
	
</def>

<def tag="property-card">
	<property-string-card if="is_a?(TaliaCore::PropertyString)" />
	<else><property-relation-card /></else>
</def>

<def tag="properties">
	<repeat: with="&@properties">
		<h3><%= this_key.to_uri.to_name_s %></h3>
		<property-card repeat param/>
	</repeat:>
</def>

<def tag="sidebared-content">
	<section-group>
		<section param="main-content">
			<header param="content-header">
				<h2 param="heading">
         				<ht key="#{model.name.tableize}.index.heading" />
       			</h2>

				<p param="count" if>
					<ht key="#{model.name.tableize}.collection.count" count="&this.size" />
				</p>
			</header>

			<section param="content-body">
				<a action="new" to="&model" param="new-link">
					<ht key="#{model.name.tableize}.actions.new" />
				</a>

				<page-nav param="top-page-nav"/>
				
				<section>
					<collection param />
				</section>
			</section>
		</section>
		<aside param />
	</section-group>
</def>


<!-- Little fix for the menu: highlight them by model name and not translation   -->
<def tag="main-nav">
  <navigation class="main-nav" merge-attrs param="default">
    <nav-item href="#{base_url}/admin">Home</nav-item>
    <% models = Hobo::Model.all_models.select { |m| linkable?(m, :index) && not_hidden?(m) }.sort_by &:name -%>
    <repeat with="&models">
      <nav-item name='&this.name'><ht key="#{this.name.tableize}.nav_item" /></nav-item>
    </repeat>
  </navigation>
</def>

<def attrs='name' tag='nav-item'>
  <% body = parameters.default 
     body = h(this.to_s) if body.blank?
     name ||= body.gsub(/<.*?>/, '').strip
     m = model.name.downcase rescue m = scope.current_navigation.downcase
     -%>
  <li class='#{&apos;current&apos; if m == name.downcase}' merge-attrs='&amp;attributes - (attrs_for(:a)+[&apos;target&apos;])'>
    <a merge-attrs='&amp;attributes &amp; (attrs_for(:a)+[&apos;target&apos;])'><%= body %></a>
  </li>
</def>

<!-- New PropertyString type are now editable in place as normal Strings -->
<def tag='editor' for='TaliaCore::PropertyString'>
    <%= attributes['class'] = 'string'
        in_place_editor(attributes, this) %>
</def>


<extend tag="page">
  <old-page merge without-live-search>
	<app-name: replace><h1><a href="#{base_url}/admin/"><app-name/></a></h1></app-name>
  </old-page>
</extend>
